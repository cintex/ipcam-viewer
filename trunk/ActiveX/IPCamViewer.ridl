// ************************************************************************ //
// AVERTISSEMENT
// -------
// Ce fichier est généré par l'importateur ou l'éditeur de bibliothèques de types.
// Sauf les erreurs de syntaxe, l'éditeur analysera les modifications apportées au fichier.
// Toutefois, lors de l'application de changements via l'éditeur, ce fichier sera régénéré
// et les commentaires et les changements de formatage seront perdus.
// ************************************************************************ //
// Fichier généré le 12/07/2013 14:41:27 (- $Rev: 12980 $, 20957751).

[
  uuid(FCEAD529-747B-4D9E-BBEB-F3E5F7A3F3AC),
  version(1.0),
  control

]
library IPCamViewer
{

  importlib("stdole2.tlb");

  interface IIPCamViewerAx;
  dispinterface IIPCamViewerAxEvents;
  coclass IPCamViewerAx;


  [
    uuid(7D94A9CB-B11A-4419-BA15-F054D77F8E54)
  ]
  enum TxAlignment
  {
    [helpstring("taLeftJustify")]
    taLeftJustify = 0,
    [helpstring("taRightJustify")]
    taRightJustify = 1,
    [helpstring("taCenter")]
    taCenter = 2
  };

  [
    uuid(DCB7A6DC-6594-4539-B436-98B951E8B303)
  ]
  enum TxBevelCut
  {
    [helpstring("bvNone")]
    bvNone = 0,
    [helpstring("bvLowered")]
    bvLowered = 1,
    [helpstring("bvRaised")]
    bvRaised = 2,
    [helpstring("bvSpace")]
    bvSpace = 3
  };

  [
    uuid(3C0FC38E-72CA-4482-9B2F-06FFA1A1BC17)
  ]
  enum TxBevelKind
  {
    [helpstring("bkNone")]
    bkNone = 0,
    [helpstring("bkTile")]
    bkTile = 1,
    [helpstring("bkSoft")]
    bkSoft = 2,
    [helpstring("bkFlat")]
    bkFlat = 3
  };

  [
    uuid(3A0EE8D6-5564-441F-A667-4427FA30A5B0)
  ]
  enum TxBorderStyle
  {
    [helpstring("bsNone")]
    bsNone = 0,
    [helpstring("bsSingle")]
    bsSingle = 1
  };

  [
    uuid(138C94DB-EEC3-4CB2-BCA6-97DC32F15C2F)
  ]
  enum TxDragMode
  {
    [helpstring("dmManual")]
    dmManual = 0,
    [helpstring("dmAutomatic")]
    dmAutomatic = 1
  };

  [
    uuid(2F92A334-7F17-4610-9FEB-9B34CE6298A8)
  ]
  enum TxVerticalAlignment
  {
    [helpstring("taAlignTop")]
    taAlignTop = 0,
    [helpstring("taAlignBottom")]
    taAlignBottom = 1,
    [helpstring("taVerticalCenter")]
    taVerticalCenter = 2
  };

  [
    uuid(0AB3E95F-7BFE-4124-BFFE-E6F19F892CC6)
  ]
  enum TxMouseButton
  {
    [helpstring("mbLeft")]
    mbLeft = 0,
    [helpstring("mbRight")]
    mbRight = 1,
    [helpstring("mbMiddle")]
    mbMiddle = 2
  };

  [
    custom(8B342977-45CB-4A01-A8F2-E47B61F3539E, 0)
  ]
  typedef IFontDisp** PPUserType1;

  [
    uuid(1BD00DE1-2E80-432D-AB6E-81DF51736E60),
    helpstring("Interface dispatch pour IPCamViewerAx Contrôle"),
    dual,
    oleautomation
  ]
  interface IIPCamViewerAx: IDispatch
  {
    [id(0x000000C9)]
    HRESULT _stdcall Connect(void);
    [id(0x000000CA)]
    HRESULT _stdcall Disconnect(void);
    [propget, id(0x000000CB)]
    HRESULT _stdcall Autoconnect([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x000000CB)]
    HRESULT _stdcall Autoconnect([in] VARIANT_BOOL Value);
    [propget, id(0x000000CC)]
    HRESULT _stdcall Autocapture([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x000000CC)]
    HRESULT _stdcall Autocapture([in] VARIANT_BOOL Value);
    [propget, id(0x000000CD)]
    HRESULT _stdcall Host([out, retval] BSTR* Value);
    [propput, id(0x000000CD)]
    HRESULT _stdcall Host([in] BSTR Value);
    [propget, id(0x000000CE)]
    HRESULT _stdcall Port([out, retval] unsigned short* Value);
    [propput, id(0x000000CE)]
    HRESULT _stdcall Port([in] unsigned short Value);
    [propget, id(0x000000CF)]
    HRESULT _stdcall JpgURL([out, retval] BSTR* Value);
    [propput, id(0x000000CF)]
    HRESULT _stdcall JpgURL([in] BSTR Value);
    [propget, id(0x000000D0)]
    HRESULT _stdcall Username([out, retval] BSTR* Value);
    [propput, id(0x000000D0)]
    HRESULT _stdcall Username([in] BSTR Value);
    [propget, id(0x000000D1)]
    HRESULT _stdcall Password([out, retval] BSTR* Value);
    [propput, id(0x000000D1)]
    HRESULT _stdcall Password([in] BSTR Value);
    [propget, id(0x000000D2)]
    HRESULT _stdcall WaitTime([out, retval] unsigned short* Value);
    [propput, id(0x000000D2)]
    HRESULT _stdcall WaitTime([in] unsigned short Value);
    [propget, id(0x000000D3)]
    HRESULT _stdcall CapturePath([out, retval] BSTR* Value);
    [propput, id(0x000000D3)]
    HRESULT _stdcall CapturePath([in] BSTR Value);
    [propget, id(0x000000D4)]
    HRESULT _stdcall CaptureInterval([out, retval] unsigned long* Value);
    [propput, id(0x000000D4)]
    HRESULT _stdcall CaptureInterval([in] unsigned long Value);
    [propget, id(0x000000D5)]
    HRESULT _stdcall CameraName([out, retval] BSTR* Value);
    [propput, id(0x000000D5)]
    HRESULT _stdcall CameraName([in] BSTR Value);
    [propget, id(0x000000D6)]
    HRESULT _stdcall Alignment([out, retval] enum TxAlignment* Value);
    [propput, id(0x000000D6)]
    HRESULT _stdcall Alignment([in] enum TxAlignment Value);
    [propget, id(0x000000D7)]
    HRESULT _stdcall AutoSize([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x000000D7)]
    HRESULT _stdcall AutoSize([in] VARIANT_BOOL Value);
    [propget, id(0x000000D8)]
    HRESULT _stdcall BevelInner([out, retval] enum TxBevelCut* Value);
    [propput, id(0x000000D8)]
    HRESULT _stdcall BevelInner([in] enum TxBevelCut Value);
    [propget, id(0x000000D9)]
    HRESULT _stdcall BevelKind([out, retval] enum TxBevelKind* Value);
    [propput, id(0x000000D9)]
    HRESULT _stdcall BevelKind([in] enum TxBevelKind Value);
    [propget, id(0x000000DA)]
    HRESULT _stdcall BevelOuter([out, retval] enum TxBevelCut* Value);
    [propput, id(0x000000DA)]
    HRESULT _stdcall BevelOuter([in] enum TxBevelCut Value);
    [propget, id(0x000000DB)]
    HRESULT _stdcall BevelWidth([out, retval] long* Value);
    [propput, id(0x000000DB)]
    HRESULT _stdcall BevelWidth([in] long Value);
    [propget, id(0x000000DC)]
    HRESULT _stdcall BorderWidth([out, retval] long* Value);
    [propput, id(0x000000DC)]
    HRESULT _stdcall BorderWidth([in] long Value);
    [propget, id(0x000000DD)]
    HRESULT _stdcall BorderStyle([out, retval] enum TxBorderStyle* Value);
    [propput, id(0x000000DD)]
    HRESULT _stdcall BorderStyle([in] enum TxBorderStyle Value);
    [propget, id(0xFFFFFDFA)]
    HRESULT _stdcall Caption([out, retval] BSTR* Value);
    [propput, id(0xFFFFFDFA)]
    HRESULT _stdcall Caption([in] BSTR Value);
    [propget, id(0xFFFFFE0B)]
    HRESULT _stdcall Color([out, retval] OLE_COLOR* Value);
    [propput, id(0xFFFFFE0B)]
    HRESULT _stdcall Color([in] OLE_COLOR Value);
    [propget, id(0x000000DE)]
    HRESULT _stdcall Ctl3D([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x000000DE)]
    HRESULT _stdcall Ctl3D([in] VARIANT_BOOL Value);
    [propget, id(0x000000DF)]
    HRESULT _stdcall UseDockManager([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x000000DF)]
    HRESULT _stdcall UseDockManager([in] VARIANT_BOOL Value);
    [propget, id(0x000000E0)]
    HRESULT _stdcall DockSite([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x000000E0)]
    HRESULT _stdcall DockSite([in] VARIANT_BOOL Value);
    [propget, id(0x000000E1)]
    HRESULT _stdcall DoubleBuffered([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x000000E1)]
    HRESULT _stdcall DoubleBuffered([in] VARIANT_BOOL Value);
    [propget, id(0x000000E2)]
    HRESULT _stdcall DragCursor([out, retval] short* Value);
    [propput, id(0x000000E2)]
    HRESULT _stdcall DragCursor([in] short Value);
    [propget, id(0x000000E3)]
    HRESULT _stdcall DragMode([out, retval] enum TxDragMode* Value);
    [propput, id(0x000000E3)]
    HRESULT _stdcall DragMode([in] enum TxDragMode Value);
    [propget, id(0xFFFFFDFE)]
    HRESULT _stdcall Enabled([out, retval] VARIANT_BOOL* Value);
    [propput, id(0xFFFFFDFE)]
    HRESULT _stdcall Enabled([in] VARIANT_BOOL Value);
    [propget, id(0x000000E4)]
    HRESULT _stdcall FullRepaint([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x000000E4)]
    HRESULT _stdcall FullRepaint([in] VARIANT_BOOL Value);
    [propget, id(0xFFFFFE00)]
    HRESULT _stdcall Font([out, retval] IFontDisp** Value);
    [propput, id(0xFFFFFE00)]
    HRESULT _stdcall Font([in] IFontDisp* Value);
    [propputref, id(0xFFFFFE00)]
    HRESULT _stdcall Font([in] IFontDisp** Value);
    [propget, id(0x000000E5)]
    HRESULT _stdcall Locked([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x000000E5)]
    HRESULT _stdcall Locked([in] VARIANT_BOOL Value);
    [propget, id(0x000000E6)]
    HRESULT _stdcall ParentBackground([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x000000E6)]
    HRESULT _stdcall ParentBackground([in] VARIANT_BOOL Value);
    [propget, id(0x000000E7)]
    HRESULT _stdcall ParentColor([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x000000E7)]
    HRESULT _stdcall ParentColor([in] VARIANT_BOOL Value);
    [propget, id(0x000000E8)]
    HRESULT _stdcall ParentCtl3D([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x000000E8)]
    HRESULT _stdcall ParentCtl3D([in] VARIANT_BOOL Value);
    [propget, id(0x000000E9)]
    HRESULT _stdcall ParentDoubleBuffered([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x000000E9)]
    HRESULT _stdcall ParentDoubleBuffered([in] VARIANT_BOOL Value);
    [propget, id(0x000000EA)]
    HRESULT _stdcall ShowCaption([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x000000EA)]
    HRESULT _stdcall ShowCaption([in] VARIANT_BOOL Value);
    [propget, id(0x000000EB)]
    HRESULT _stdcall VerticalAlignment([out, retval] enum TxVerticalAlignment* Value);
    [propput, id(0x000000EB)]
    HRESULT _stdcall VerticalAlignment([in] enum TxVerticalAlignment Value);
    [propget, id(0x000000EC)]
    HRESULT _stdcall Visible([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x000000EC)]
    HRESULT _stdcall Visible([in] VARIANT_BOOL Value);
    [id(0x000000ED)]
    HRESULT _stdcall SetDesignVisible([in] VARIANT_BOOL Value);
    [propget, id(0x000000EE), hidden]
    HRESULT _stdcall AlignDisabled([out, retval] VARIANT_BOOL* Value);
    [propget, id(0x000000EF), hidden]
    HRESULT _stdcall MouseInClient([out, retval] VARIANT_BOOL* Value);
    [propget, id(0x000000F0), hidden]
    HRESULT _stdcall VisibleDockClientCount([out, retval] long* Value);
    [id(0x000000F1)]
    HRESULT _stdcall DrawTextBiDiModeFlagsReadingOnly([out, retval] long* Value);
    [id(0x000000F2)]
    HRESULT _stdcall InitiateAction(void);
    [id(0x000000F3)]
    HRESULT _stdcall IsRightToLeft([out, retval] VARIANT_BOOL* Value);
    [id(0x000000F4)]
    HRESULT _stdcall UseRightToLeftReading([out, retval] VARIANT_BOOL* Value);
    [id(0x000000F5)]
    HRESULT _stdcall UseRightToLeftScrollBar([out, retval] VARIANT_BOOL* Value);
    [propget, id(0x000000F6), hidden]
    HRESULT _stdcall ExplicitLeft([out, retval] long* Value);
    [propget, id(0x000000F7), hidden]
    HRESULT _stdcall ExplicitTop([out, retval] long* Value);
    [propget, id(0x000000F8), hidden]
    HRESULT _stdcall ExplicitWidth([out, retval] long* Value);
    [propget, id(0x000000F9), hidden]
    HRESULT _stdcall ExplicitHeight([out, retval] long* Value);
    [propget, id(0x000000FA)]
    HRESULT _stdcall AlignWithMargins([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x000000FA)]
    HRESULT _stdcall AlignWithMargins([in] VARIANT_BOOL Value);
    [propget, id(0x000000FB)]
    HRESULT _stdcall ParentCustomHint([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x000000FB)]
    HRESULT _stdcall ParentCustomHint([in] VARIANT_BOOL Value);
    [id(0x000000FC)]
    HRESULT _stdcall SetSubComponent([in] VARIANT_BOOL IsSubComponent);
    [id(0x000000FD)]
    HRESULT _stdcall QualifiedClassName([out, retval] BSTR* Value);
    [id(0x000000FE)]
    HRESULT _stdcall UnitScope([out, retval] BSTR* Value);
  };

  [
    uuid(DB87D671-836A-49C2-AB24-DEC7C9B5B013),
    helpstring("Interface d'événements pour IPCamViewerAx Contrôle")
  ]
  dispinterface IIPCamViewerAxEvents
  {
    properties:
    methods:
    [id(0x000000C9)]
    void OnCanResize([in, out] long* NewWidth, [in, out] long* NewHeight, [in, out] VARIANT_BOOL* Resize);
    [id(0x000000CA)]
    void OnClick(void);
    [id(0x000000CB)]
    void OnConstrainedResize([in, out] long* MinWidth, [in, out] long* MinHeight, [in, out] long* MaxWidth, [in, out] long* MaxHeight);
    [id(0x000000CC)]
    void OnDblClick(void);
    [id(0x000000CD)]
    void OnMouseEnter(void);
    [id(0x000000CE)]
    void OnMouseLeave(void);
    [id(0x000000CF)]
    void OnResize(void);
  };

  [
    uuid(1FB3A204-8D3C-43EA-B004-BD18BE79227E),
    helpstring("IPCamViewerAx Contrôle"),
    control
  ]
  coclass IPCamViewerAx
  {
    [default] interface IIPCamViewerAx;
    [default, source] dispinterface IIPCamViewerAxEvents;
  };

};
